{"meta":{"generator":"0.9.0","format":20,"date":1664703417504},"custom":{"general":{"name":"general","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Music Player\n![npm](https://img.shields.io/npm/dt/discord-music-player?style=for-the-badge)\n![npm](https://img.shields.io/npm/v/discord-music-player?style=for-the-badge)\n![CodeFactor Grade](https://img.shields.io/codefactor/grade/github/SushiBtw/discord-music-player?color=%2348aaf1&style=for-the-badge)\n\n### Note: This is the v9 version of Discord Music Player for Discord.JS v14 & v13!\n\nDiscord Music Player is a powerful [Node.js](https://nodejs.org) module that allows you to easily implement music commands.\n**Everything** is customizable, and everything can be done using this package - **there are no limitations!**\n\nThis package supports YouTube Videos & Playlists, Spotify Songs & Playlists, Apple Music Songs & Playlists.\nPackage from version v7.0.0 is fully maintained by [SushiBtw](https://github.com/SushiBtw).\n\n### Requirements:\n- [Discord.js v14 or v13](https://www.npmjs.com/package/discord.js),\n- [Node.JS v16](https://nodejs.org/),\n\n# Installation\n*Node.JS v16 or newer is required to run this module.*\n```sh\nnpm install --save discord-music-player\n```\nInstall **@discordjs/opus**:\n```sh\nnpm install --save @discordjs/opus\n```\n**Install [FFMPEG](https://www.ffmpeg.org/download.html)!**\n\n# Documentation\n**Discord Music Player documentation: [https://discord-music-player.js.org/](https://discord-music-player.js.org/)**\n\n### **Need some help?**\nFeel free to join [Discord-Music-Player Discord Server](https://discord.gg/6fejZNsmFC) and ask us about DMP.\n\n# Getting Started\n**The code bellow, will show you how to use DMP in your code.**\n\n*Please define your **Player** after the **client/bot** definition.*\n\n[!] Remember to include the related voice **Intents** at the client options. [!]\n```js\nconst Discord = require(\"discord.js\");\nconst client = new Discord.Client({\n    intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES, Intents.FLAGS.GUILD_VOICE_STATES]\n    // intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildVoiceStates] for discord.js v14\n});\nconst settings = {\n    prefix: '!',\n    token: 'YourBotTokenHere'\n};\n\nconst { Player } = require(\"discord-music-player\");\nconst player = new Player(client, {\n    leaveOnEmpty: false, // This options are optional.\n});\n// You can define the Player as *client.player* to easily access it.\nclient.player = player;\n\nclient.on(\"ready\", () => {\n    console.log(\"I am ready to Play with DMP ðŸŽ¶\");\n});\n\nclient.login(settings.token);\n```\n\n# Example Usage\n```js\nconst { RepeatMode } = require('discord-music-player');\n\nclient.on('messageCreate', async (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    let guildQueue = client.player.getQueue(message.guild.id);\n\n    if(command === 'play') {\n        let queue = client.player.createQueue(message.guild.id);\n        await queue.join(message.member.voice.channel);\n        let song = await queue.play(args.join(' ')).catch(err => {\n            console.log(err);\n            if(!guildQueue)\n                queue.stop();\n        });\n    }\n\n    if(command === 'playlist') {\n        let queue = client.player.createQueue(message.guild.id);\n        await queue.join(message.member.voice.channel);\n        let song = await queue.playlist(args.join(' ')).catch(err => {\n            console.log(err);\n            if(!guildQueue)\n                queue.stop();\n        });\n    }\n\n    if(command === 'skip') {\n        guildQueue.skip();\n    }\n\n    if(command === 'stop') {\n        guildQueue.stop();\n    }\n\n    if(command === 'removeLoop') {\n        guildQueue.setRepeatMode(RepeatMode.DISABLED); // or 0 instead of RepeatMode.DISABLED\n    }\n\n    if(command === 'toggleLoop') {\n        guildQueue.setRepeatMode(RepeatMode.SONG); // or 1 instead of RepeatMode.SONG\n    }\n\n    if(command === 'toggleQueueLoop') {\n        guildQueue.setRepeatMode(RepeatMode.QUEUE); // or 2 instead of RepeatMode.QUEUE\n    }\n\n    if(command === 'setVolume') {\n        guildQueue.setVolume(parseInt(args[0]));\n    }\n\n    if(command === 'seek') {\n        guildQueue.seek(parseInt(args[0]) * 1000);\n    }\n\n    if(command === 'clearQueue') {\n        guildQueue.clearQueue();\n    }\n\n    if(command === 'shuffle') {\n        guildQueue.shuffle();\n    }\n\n    if(command === 'getQueue') {\n        console.log(guildQueue);\n    }\n\n    if(command === 'getVolume') {\n        console.log(guildQueue.volume)\n    }\n\n    if(command === 'nowPlaying') {\n        console.log(`Now playing: ${guildQueue.nowPlaying}`);\n    }\n\n    if(command === 'pause') {\n        guildQueue.setPaused(true);\n    }\n\n    if(command === 'resume') {\n        guildQueue.setPaused(false);\n    }\n\n    if(command === 'remove') {\n        guildQueue.remove(parseInt(args[0]));\n    }\n\n    if(command === 'createProgressBar') {\n        const ProgressBar = guildQueue.createProgressBar();\n        \n        // [======>              ][00:35/2:20]\n        console.log(ProgressBar.prettier);\n    }\n})\n```\n\n### Events:\n```js\n// Init the event listener only once (at the top of your code).\nclient.player\n    // Emitted when channel was empty.\n    .on('channelEmpty',  (queue) =>\n        console.log(`Everyone left the Voice Channel, queue ended.`))\n    // Emitted when a song was added to the queue.\n    .on('songAdd',  (queue, song) =>\n        console.log(`Song ${song} was added to the queue.`))\n    // Emitted when a playlist was added to the queue.\n    .on('playlistAdd',  (queue, playlist) =>\n        console.log(`Playlist ${playlist} with ${playlist.songs.length} was added to the queue.`))\n    // Emitted when there was no more music to play.\n    .on('queueDestroyed',  (queue) =>\n        console.log(`The queue was destroyed.`))\n    // Emitted when the queue was destroyed (either by ending or stopping).    \n    .on('queueEnd',  (queue) =>\n        console.log(`The queue has ended.`))\n    // Emitted when a song changed.\n    .on('songChanged', (queue, newSong, oldSong) =>\n        console.log(`${newSong} is now playing.`))\n    // Emitted when a first song in the queue started playing.\n    .on('songFirst',  (queue, song) =>\n        console.log(`Started playing ${song}.`))\n    // Emitted when someone disconnected the bot from the channel.\n    .on('clientDisconnect', (queue) =>\n        console.log(`I was kicked from the Voice Channel, queue ended.`))\n    // Emitted when deafenOnJoin is true and the bot was undeafened\n    .on('clientUndeafen', (queue) =>\n        console.log(`I got undefeanded.`))\n    // Emitted when there was an error in runtime\n    .on('error', (error, queue) => {\n        console.log(`Error: ${error} in ${queue.guild.name}`);\n    });\n```\n\n# Passing custom data\n\n### Queue\nWhile running the `Queue#createQueue()` method you can pass a `options#data` object to hold custom data.\nThis can be made in two ways:\n```js\n// Pass custom data\nawait player.createQueue(message.guild.id, {\n    data: {\n        queueInitMessage: message,\n        myObject: 'this will stay with the queue :)',\n        more: 'add more... there are no limitations...'\n    }\n});\n// Or by using\nqueue.setData({\n    whatever: 'you want :D'\n});\n\n// Access custom data\nlet queue = player.getQueue(message.guild.id);\nlet initMessage = queue.data.queueInitMessage;\nawait initMessage.channel.send(`This message object is hold in Queue :D`);\n```\n\n### Song or Playlist\nWhile running the `Queue#play()`/Queue#playlist() method you can pass a `options#data` object to hold custom data.\nThis can be made in two ways:\n```js\n// Play the song\nlet song = await queue.play('Born in the USA!');\n// Set song data\nsong.setData({\n    initMessage: message\n});\n\n// Play the playlist\nlet playlist = await queue.playlist('https://www.youtube.com/playlist?list=PLDLGxnP4y2mGKGEqwxWTRkd3HtrrVTMdU');\n// Set playlist data (will set data for each song in the playlist)\nsong.setData({\n    initMessage: message\n});\n\n// Access custom data\nlet queue = player.getQueue(message.guild.id);\nlet { initMessage } = queue.nowPlaying.data;\nawait initMessage.channel.send(`This message object is hold in Song :D`);\n```\n\n## Example bots made with this package\n\n- [Music bot](https://github.com/elbkr/music-bot) by [elbkr](https://github.com/elbkr)","path":"README.md"}}},"migrating":{"name":"migrating","files":{"migrating":{"name":"Migrating from v7 to v8","type":"md","content":"# Migrating to Discord Music Player v9\n\n### Note: Version 8 and 9 has some breaking changes, your old code from Version 7 will no longer work.\n\nThe **Version 8 & 9** update brings support for [Discord.js v14 & v13](https://www.npmjs.com/package/discord.js), new features and better Queue management.\nWe use the new [@discordjs/voice](https://www.npmjs.com/package/@discordjs/voice) package, that makes the music even better!\n\n## Code example\n\nEvery function related to Music is now a part of `Queue`.\nYou need to create a new `Queue` instance to interact with the Guild music.\n```diff\n- player.play(message, search);\n+ let queue = player.createQueue(message.guild.id);\n+ await queue.join(message.member.voice.channel);\n+ let song = await queue.play(search);\n```\n\n## Event management\n\nThe **Version 8** removes `message` object, from the play parameters.\nDiscord Music Player methods accept now `GuildResolvable` (`Guild`/`GuildID`) discord.js object.\n\nInstead of the `message` object, you can pass custom `<Queue>.data` or `<Song>.data` option to hold custom data.\n```js\nlet queue = player.createQueue(interaction.guild.id, {\n    data: interaction\n});\nawait queue.join(message.member.voice.channel);\nawait queue.play('F1 music', {\n    data: { custom: 'fields' }\n});\n```\nThe `data` object will be always accessible for you under the `<Queue>.data` prop.\n```js\nplayer.on('songAdd', (queue, song) => {\n    queue.data.channel.send(`**${song}** has been added to the queue.`);\n    console.log(`Song custom data: ${song.data}`); // { custom: 'fields' }\n})\nplayer.on('queueEnd', (queue) => {\n    queue.data.channel.send(`Queue ended, there is nothing to play.`);\n})\nplayer.on('queueDestroyed', (queue) => {\n    queue.data.channel.send(`Playback ended.`);\n})\n```\n\n## Utils\nFrom the Discord Music Player **Version 8**, you can access some Utils functions, such as `search()` or `best()`.\n\n### Search\nSearch util allows you to search for songs, allow you to pick the best search and play it.\n```js\nconst { Utils } = require('discord-music-player');\n\nlet queue = player.getQueue(message.guild);\n\n// Search for songs\nlet search = await Utils.search(\n    'F1 music',\n    {\n        sortBy: \"view count\", // Custom options\n    },\n    queue, // Queue object\n    10 // Search limit\n);\n\n// Play the 3rd searched song\nawait queue.play(search[2]);\n```\n\n### Best\nBest util allows you to search for the best song, use the method how you want.\n```js\nconst { Utils } = require('discord-music-player');\n\nlet queue = player.getQueue(message.guild);\n\n// Search for best song\nlet best = await Utils.best(\n    'F1 music',\n    {\n        sortBy: \"view count\", // Custom options\n    },\n    queue, // Queue object\n);\n\nmessage.channel.send(`Best F1 music so far: ${best.name} (${best.url})`);\n```\n\n## Errors\nThe Discord Music Player **Version 8** added a custom `DMPError` object, that is thrown while an error occurred while calling a method.\nWhile catching errors in async methods is easy, using the `.catch()` tag - you would need to use the `try...catch` statement in non-async methods.\n\n**Every error will return a custom [DMPError](https://discord-music-player.js.org/docs/main/development/class/DMPError) object.**\nList of Error Code's can be found [here](https://discord-music-player.js.org/docs/main/development/typedef/DMPErrors).\n### Play (async)\n```js\nlet queue = client.player.createQueue(message.guild.id);\nawait queue.join(message.member.voice.channel);\nlet song = await queue.play(args.join(' ')).catch(err => {\n    console.log(err.name); // UnknownVoice\n    console.log(err.message); // The provided Member is not in a Voice Channel.\n});\n```\n\n### Skip (non-async)\nThe error shown here can exist while the Queue ended,\nbut due the `QueueOptions#timeout` - the bot did not leave (so the Queue existed, but was locally destroyed) at the time the method was not called.\n```js\nlet queue = client.player.getQueue(message.guild.id);\nif(!queue) return;\ntry {\n    queue.skip();\n}\ncatch(err) {\n    console.log(err.name); // QueueDestroyed\n    console.log(err.message); // The Queue was destroyed.\n}\n```\n\n## Event Errors\nThe `play()/playlist()` error handling does not longer emit the `Player#error` event ([read here](#Errors)).\nYou need to handle Event Errors (happening in runtime) by yourself now.\n\nHere is an example:\n```js\nplayer.on('error', (error, queue) => {\n    queue.data.channel.send(`An error occurred: \\`${error.message}\\`.`);\n})\n```\n\n## New Play Options\nYou can now pass few new Play options such as:\n- `timecode: boolean` - If this option is true, it will seek to the url time param (?t=) moment,\n- `localAddress: string` - If this option is provided, it will use the provided IP address to search and play the song.\n```js\nlet queue = client.player.createQueue(message.guild.id);\nawait queue.join(message.member.voice.channel);\nlet song = await queue.play('F1 music', {\n    timecode: true,\n    localAddress: 'CustomIPv6YouOwn'\n});\n```\n\n## Missing something? Found a Bug?\nFeel free to join [Discord-Music-Player Discord Server](https://discord.gg/6fejZNsmFC) and ask us about DMP.\n\nCreate a Bug Report/Question Report via [Discord-Music-Player Github](https://github.com/SushiBtw/discord-music-player/issues).\n","path":"docs/migrating/migrating.md"}}}},"classes":[{"name":"Player","construct":{"name":"Player","description":"<p>Player constructor</p>","params":[{"name":"client","type":[[["Client"]]]},{"name":"options","optional":true,"default":"{}","type":[[["PlayerOptions"]]]}]},"props":[{"name":"options","description":"<p>Player options</p>","type":[[["PlayerOptions"]]],"meta":{"line":27,"file":"Player.ts","path":"src"}},{"name":"queues","description":"<p>Player queues</p>","type":[[["Collection","<"],["Snowflake",", "],["Queue",">"]]],"meta":{"line":37,"file":"Player.ts","path":"src"}}],"methods":[{"name":"createQueue","description":"<p>Creates the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]},{"name":"options","optional":true,"default":"this.options","type":[[["PlayerOptions"]]]}],"returns":[[["Queue"]]],"meta":{"line":50,"file":"Player.ts","path":"src"}},{"name":"hasQueue","description":"<p>Check if the guild has a queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]}],"returns":[[["boolean"]]],"meta":{"line":78,"file":"Player.ts","path":"src"}},{"name":"getQueue","description":"<p>Gets the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]}],"returns":{"types":[[["Queue"]]],"nullable":true},"meta":{"line":87,"file":"Player.ts","path":"src"}},{"name":"setQueue","description":"<p>Deletes the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]},{"name":"queue","type":[[["Queue"]]]}],"returns":[[["void"]]],"meta":{"line":96,"file":"Player.ts","path":"src"}},{"name":"deleteQueue","description":"<p>Deletes the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]}],"returns":[[["void"]]],"meta":{"line":106,"file":"Player.ts","path":"src"}},{"name":"_voiceUpdate","description":"<p>Handle a Voice State Update</p>","access":"private","params":[{"name":"oldState","type":[[["VoiceState"]]]},{"name":"newState","type":[[["VoiceState"]]]}],"returns":[[["void"]]],"meta":{"line":115,"file":"Player.ts","path":"src"}}],"events":[{"name":"channelEmpty","description":"<p>Emitted when channel was empty</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]}],"meta":{"line":193,"file":"types.ts","path":"src/types"}},{"name":"songAdd","description":"<p>Emitted when a song was added to the queue</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]},{"name":"song","description":"<p>Song</p>","type":[[["Song"]]]}],"meta":{"line":199,"file":"types.ts","path":"src/types"}},{"name":"playlistAdd","description":"<p>Emitted when a playlist was added to the queue</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]},{"name":"playlist","description":"<p>Playlist</p>","type":[[["Playlist"]]]}],"meta":{"line":206,"file":"types.ts","path":"src/types"}},{"name":"queueEnd","description":"<p>Emitted when there was no more music to play</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]}],"meta":{"line":213,"file":"types.ts","path":"src/types"}},{"name":"queueDestroyed","description":"<p>Emitted when the queue was destroyed</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]}],"meta":{"line":219,"file":"types.ts","path":"src/types"}},{"name":"songChanged","description":"<p>Emitted when a song changed</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]},{"name":"newSong","description":"<p>Song</p>","type":[[["Song"]]]},{"name":"oldSong","description":"<p>Song</p>","type":[[["Song"]]]}],"meta":{"line":225,"file":"types.ts","path":"src/types"}},{"name":"songFirst","description":"<p>Emitted when a first song in the queue started playing</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]},{"name":"song","description":"<p>Song</p>","type":[[["Song"]]]}],"meta":{"line":233,"file":"types.ts","path":"src/types"}},{"name":"clientDisconnect","description":"<p>Emitted when someone disconnected the bot from the channel</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]}],"meta":{"line":240,"file":"types.ts","path":"src/types"}},{"name":"clientUndeafen","description":"<p>Emitted when deafenOnJoin is true and the bot was undeafened</p>","params":[{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]}],"meta":{"line":246,"file":"types.ts","path":"src/types"}},{"name":"error","description":"<p>Emitted when there was an error with the Player</p>","params":[{"name":"error","description":"<p>Error string</p>","type":[[["string"]]]},{"name":"queue","description":"<p>Queue</p>","type":[[["Queue"]]]}],"meta":{"line":252,"file":"types.ts","path":"src/types"}}],"meta":{"line":12,"file":"Player.ts","path":"src"}},{"name":"DMPError","construct":{"name":"DMPError","description":"<p>DMPError constructor</p>","params":[{"name":"code","type":[[["DMPErrors"]]]}]},"props":[{"name":"name","description":"<p>DMPError short name (code)</p>","type":[[["string"]]],"meta":{"line":12,"file":"DMPError.ts","path":"src/managers"}},{"name":"message","description":"<p>DMPError long message</p>","type":[[["string"]]],"meta":{"line":18,"file":"DMPError.ts","path":"src/managers"}}],"methods":[{"name":"toJSON","description":"<p>DMPError in JSON representation</p>","returns":[[["Object"]]],"meta":{"line":28,"file":"DMPError.ts","path":"src/managers"}},{"name":"toString","description":"<p>DMPError in string representation</p>","returns":[[["string"]]],"meta":{"line":36,"file":"DMPError.ts","path":"src/managers"}}],"meta":{"line":5,"file":"DMPError.ts","path":"src/managers"}},{"name":"Playlist","construct":{"name":"Playlist","description":"<p>Playlist constructor</p>","params":[{"name":"raw","type":[[["RawPlaylist"]]]},{"name":"queue","type":[[["Queue"]]]},{"name":"requestedBy","optional":true,"type":[[["User"]]]}]},"props":[{"name":"player","description":"<p>Playlist instance</p>","readonly":true,"type":[[["Player"]]],"meta":{"line":20,"file":"Playlist.ts","path":"src/managers"}},{"name":"queue","description":"<p>Playlist instance</p>","type":[[["Queue"]]],"meta":{"line":27,"file":"Playlist.ts","path":"src/managers"}},{"name":"name","description":"<p>Playlist name</p>","type":[[["string"]]],"meta":{"line":33,"file":"Playlist.ts","path":"src/managers"}},{"name":"author","description":"<p>Playlist author</p>","type":[[["string"]]],"meta":{"line":39,"file":"Playlist.ts","path":"src/managers"}},{"name":"url","description":"<p>Playlist url</p>","type":[[["string"]]],"meta":{"line":45,"file":"Playlist.ts","path":"src/managers"}},{"name":"songs","description":"<p>Playlist songs</p>","type":[[["string"]]],"meta":{"line":51,"file":"Playlist.ts","path":"src/managers"}}],"methods":[{"name":"toString","description":"<p>Playlist name and author in string representation</p>","returns":[[["string"]]],"meta":{"line":70,"file":"Playlist.ts","path":"src/managers"}}],"meta":{"line":12,"file":"Playlist.ts","path":"src/managers"}},{"name":"ProgressBar","construct":{"name":"ProgressBar","description":"<p>ProgressBar constructor</p>","params":[{"name":"queue","type":[[["Queue"]]]},{"name":"options","optional":true,"default":"DefaultProgressBarOptions","type":[[["ProgressBarOptions"]]]}]},"props":[{"name":"guild","description":"<p>Guild instance</p>","access":"private","type":[[["Guild"]]],"meta":{"line":16,"file":"ProgressBar.ts","path":"src/managers"}},{"name":"options","description":"<p>ProgressBar options</p>","type":[[["PlayerOptions"]]],"meta":{"line":23,"file":"ProgressBar.ts","path":"src/managers"}},{"name":"bar","description":"<p>Progress Bar without timecodes</p>","type":[[["string"]]],"meta":{"line":29,"file":"ProgressBar.ts","path":"src/managers"}},{"name":"times","description":"<p>Progress Bar timecodes</p>","type":[[["string"]]],"meta":{"line":35,"file":"ProgressBar.ts","path":"src/managers"}},{"name":"prettier","description":"<p>Progress Bar in a prettier representation</p>","type":[[["string"]]],"meta":{"line":75,"file":"ProgressBar.ts","path":"src/managers"}}],"methods":[{"name":"create","description":"<p>Creates the Progress Bar</p>","access":"private","meta":{"line":59,"file":"ProgressBar.ts","path":"src/managers"}},{"name":"toString","description":"<p>Progress Bar in string representation</p>","returns":[[["string"]]],"meta":{"line":83,"file":"ProgressBar.ts","path":"src/managers"}}],"meta":{"line":9,"file":"ProgressBar.ts","path":"src/managers"}},{"name":"Queue","construct":{"name":"Queue","description":"<p>Queue constructor</p>","params":[{"name":"player","type":[[["Player"]]]},{"name":"guild","type":[[["Guild"]]]},{"name":"options","type":[[["PlayerOptions"]]]}]},"props":[{"name":"player","description":"<p>Player instance</p>","readonly":true,"type":[[["Player"]]],"meta":{"line":42,"file":"Queue.ts","path":"src/managers"}},{"name":"guild","description":"<p>Guild instance</p>","readonly":true,"type":[[["Guild"]]],"meta":{"line":49,"file":"Queue.ts","path":"src/managers"}},{"name":"connection","description":"<p>Queue connection</p>","readonly":true,"nullable":true,"type":[[["StreamConnection"]]],"meta":{"line":56,"file":"Queue.ts","path":"src/managers"}},{"name":"songs","description":"<p>Queue songs</p>","type":[[["Array","<"],["Song",">"]]],"meta":{"line":63,"file":"Queue.ts","path":"src/managers"}},{"name":"isPlaying","description":"<p>If Song is playing on the Queue</p>","readonly":true,"type":[[["boolean"]]],"meta":{"line":69,"file":"Queue.ts","path":"src/managers"}},{"name":"data","description":"<p>Queue custom data</p>","type":[[["any"]]],"meta":{"line":76,"file":"Queue.ts","path":"src/managers"}},{"name":"options","description":"<p>Queue options</p>","type":[[["PlayerOptions"]]],"meta":{"line":82,"file":"Queue.ts","path":"src/managers"}},{"name":"repeatMode","description":"<p>Queue repeat mode</p>","type":[[["RepeatMode"]]],"meta":{"line":88,"file":"Queue.ts","path":"src/managers"}},{"name":"destroyed","description":"<p>If the queue is destroyed</p>","readonly":true,"type":[[["boolean"]]],"meta":{"line":94,"file":"Queue.ts","path":"src/managers"}},{"name":"volume","description":"<p>Gets the current volume</p>","type":[[["number"]]],"meta":{"line":108,"file":"Queue.ts","path":"src/managers"}},{"name":"paused","description":"<p>Gets the paused state of the player</p>","type":[[["boolean"]]],"meta":{"line":118,"file":"Queue.ts","path":"src/managers"}},{"name":"nowPlaying","description":"<p>Returns current playing song</p>","nullable":true,"type":[[["Song"]]],"meta":{"line":133,"file":"Queue.ts","path":"src/managers"}}],"methods":[{"name":"join","description":"<p>Joins a voice channel</p>","params":[{"name":"channelId","type":[[["GuildChannelResolvable"]]]}],"async":true,"returns":[[["Promise","<"],["Queue",">"]]],"meta":{"line":141,"file":"Queue.ts","path":"src/managers"}},{"name":"play","description":"<p>Plays or Queues a song (in a VoiceChannel)</p>","params":[{"name":"search","type":[[["Song"]],[["string"]]]},{"name":"options","optional":true,"default":"DefaultPlayOptions","type":[[["PlayOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Song",">"]]],"meta":{"line":226,"file":"Queue.ts","path":"src/managers"}},{"name":"playlist","description":"<p>Plays or Queues a playlist (in a VoiceChannel)</p>","params":[{"name":"search","type":[[["Playlist"]],[["string"]]]},{"name":"options","optional":true,"default":"DefaultPlaylistOptions","type":[[["PlaylistOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Playlist",">"]]],"meta":{"line":305,"file":"Queue.ts","path":"src/managers"}},{"name":"seek","description":"<p>Seeks the current playing Song</p>","params":[{"name":"time","type":[[["number"]]]}],"async":true,"returns":[[["boolean"]]],"meta":{"line":339,"file":"Queue.ts","path":"src/managers"}},{"name":"skip","description":"<p>Skips the current playing Song and returns it</p>","params":[{"name":"index","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Song"]]],"meta":{"line":365,"file":"Queue.ts","path":"src/managers"}},{"name":"stop","description":"<p>Stops playing the Music and cleans the Queue</p>","returns":[[["void"]]],"meta":{"line":382,"file":"Queue.ts","path":"src/managers"}},{"name":"shuffle","description":"<p>Shuffles the Queue</p>","returns":[[["Array","<"],["Song",">"]]],"meta":{"line":400,"file":"Queue.ts","path":"src/managers"}},{"name":"setPaused","description":"<p>Pause/resume the current Song</p>","params":[{"name":"state","description":"<p>Pause state, if none it will pause the Song</p>","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":415,"file":"Queue.ts","path":"src/managers"}},{"name":"remove","description":"<p>Remove a Song from the Queue</p>","params":[{"name":"index","type":[[["number"]]]}],"returns":[[["Song"]],[["undefined"]]],"meta":{"line":431,"file":"Queue.ts","path":"src/managers"}},{"name":"setVolume","description":"<p>Sets the current volume</p>","params":[{"name":"volume","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":443,"file":"Queue.ts","path":"src/managers"}},{"name":"clearQueue","description":"<p>Clears the Queue</p>","returns":[[["void"]]],"meta":{"line":458,"file":"Queue.ts","path":"src/managers"}},{"name":"setRepeatMode","description":"<p>Sets Queue repeat mode</p>","params":[{"name":"repeatMode","type":[[["RepeatMode"]]]}],"returns":[[["boolean"]]],"meta":{"line":470,"file":"Queue.ts","path":"src/managers"}},{"name":"createProgressBar","description":"<p>Creates Progress Bar class</p>","params":[{"name":"options","optional":true,"type":[[["ProgressBarOptions"]]]}],"returns":[[["ProgressBar"]]],"meta":{"line":487,"file":"Queue.ts","path":"src/managers"}},{"name":"setData","description":"<p>Set's custom queue data</p>","params":[{"name":"data","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":501,"file":"Queue.ts","path":"src/managers"}},{"name":"leave","description":"<p>Disconnects the player</p>","returns":[[["void"]]],"meta":{"line":513,"file":"Queue.ts","path":"src/managers"}}],"meta":{"line":34,"file":"Queue.ts","path":"src/managers"}},{"name":"Song","construct":{"name":"Song","description":"<p>Song constructor</p>","params":[{"name":"raw","type":[[["RawSong"]]]},{"name":"queue","type":[[["Queue"]]]},{"name":"requestedBy","optional":true,"type":[[["User"]]]}]},"props":[{"name":"player","description":"<p>Player instance</p>","readonly":true,"type":[[["Player"]]],"meta":{"line":26,"file":"Song.ts","path":"src/managers"}},{"name":"queue","description":"<p>Queue instance</p>","type":[[["Queue"]]],"meta":{"line":33,"file":"Song.ts","path":"src/managers"}},{"name":"name","description":"<p>Song name</p>","type":[[["string"]]],"meta":{"line":39,"file":"Song.ts","path":"src/managers"}},{"name":"author","description":"<p>Song author</p>","type":[[["string"]]],"meta":{"line":45,"file":"Song.ts","path":"src/managers"}},{"name":"url","description":"<p>Song url</p>","type":[[["string"]]],"meta":{"line":51,"file":"Song.ts","path":"src/managers"}},{"name":"thumbnail","description":"<p>Song thumbnail</p>","type":[[["string"]]],"meta":{"line":57,"file":"Song.ts","path":"src/managers"}},{"name":"requestedBy","description":"<p>The User who requested the Song</p>","type":[[["string"]]],"meta":{"line":63,"file":"Song.ts","path":"src/managers"}},{"name":"duration","description":"<p>Song duration</p>","type":[[["string"]]],"meta":{"line":69,"file":"Song.ts","path":"src/managers"}},{"name":"isLive","description":"<p>If the song is a livestream</p>","type":[[["boolean"]]],"meta":{"line":75,"file":"Song.ts","path":"src/managers"}},{"name":"isFirst","description":"<p>If the song is first in the queue</p>","readonly":true,"type":[[["boolean"]]],"meta":{"line":81,"file":"Song.ts","path":"src/managers"}},{"name":"seekTime","description":"<p>Song seekTime</p>","readonly":true,"type":[[["number"]]],"meta":{"line":88,"file":"Song.ts","path":"src/managers"}},{"name":"data","description":"<p>Song custom data</p>","type":[[["any"]]],"meta":{"line":95,"file":"Song.ts","path":"src/managers"}},{"name":"milliseconds","description":"<p>Converts duration (HH:MM:SS) to milliseconds</p>","type":[[["number"]]],"meta":{"line":126,"file":"Song.ts","path":"src/managers"}}],"methods":[{"name":"_setFirst","access":"private","params":[{"name":"first","default":true,"nullable":true,"type":[[["boolean"]]]}],"meta":{"line":134,"file":"Song.ts","path":"src/managers"}},{"name":"setData","description":"<p>Set's custom song data</p>","params":[{"name":"data","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":142,"file":"Song.ts","path":"src/managers"}},{"name":"toString","description":"<p>Song name and author in string representation</p>","returns":[[["string"]]],"meta":{"line":151,"file":"Song.ts","path":"src/managers"}}],"meta":{"line":18,"file":"Song.ts","path":"src/managers"}},{"name":"Utils","methods":[{"name":"parseVideo","description":"<p>Get ID from YouTube link</p>","scope":"static","params":[{"name":"url","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":41,"file":"Utils.ts","path":"src/utils"}},{"name":"parseVideoTimecode","description":"<p>Get timecode from YouTube link</p>","scope":"static","params":[{"name":"url","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":51,"file":"Utils.ts","path":"src/utils"}},{"name":"parsePlaylist","description":"<p>Get ID from Playlist link</p>","scope":"static","params":[{"name":"url","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":61,"file":"Utils.ts","path":"src/utils"}},{"name":"search","description":"<p>Search for Songs</p>","scope":"static","params":[{"name":"Search","type":[[["string"]]]},{"name":"SOptions","optional":true,"default":"DefaultPlayOptions","type":[[["PlayOptions"]]]},{"name":"Queue","type":[[["Queue"]]]},{"name":"Limit","optional":true,"default":1,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Song",">>"]]],"meta":{"line":71,"file":"Utils.ts","path":"src/utils"}},{"name":"link","description":"<p>Search for Song via link</p>","scope":"static","params":[{"name":"Search","type":[[["string"]]]},{"name":"SOptions","type":[[["PlayOptions"]]]},{"name":"Queue","type":[[["Queue"]]]}],"async":true,"returns":[[["Promise","<"],["Song",">"]]],"meta":{"line":149,"file":"Utils.ts","path":"src/utils"}},{"name":"best","description":"<p>Gets the best result of a Search</p>","scope":"static","params":[{"name":"Search","type":[[["Song"]],[["string"]]]},{"name":"SOptions","type":[[["PlayOptions"]]]},{"name":"Queue","type":[[["Queue"]]]}],"async":true,"returns":[[["Promise","<"],["Song",">"]]],"meta":{"line":215,"file":"Utils.ts","path":"src/utils"}},{"name":"playlist","description":"<p>Search for Playlist</p>","scope":"static","params":[{"name":"Search","type":[[["string"]]]},{"name":"SOptions","type":[[["PlaylistOptions"]]]},{"name":"Queue","type":[[["Queue"]]]}],"async":true,"returns":[[["Promise","<"],["Playlist",">"]]],"meta":{"line":248,"file":"Utils.ts","path":"src/utils"}},{"name":"shuffle","description":"<p>Shuffles an array</p>","scope":"static","params":[{"name":"array","type":[[["Array","<"],["any",">"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":401,"file":"Utils.ts","path":"src/utils"}},{"name":"msToTime","description":"<p>Converts milliseconds to duration (HH:MM:SS)</p>","scope":"static","returns":[[["string"]]],"meta":{"line":422,"file":"Utils.ts","path":"src/utils"}},{"name":"timeToMs","description":"<p>Converts duration (HH:MM:SS) to milliseconds</p>","scope":"static","returns":[[["number"]]],"meta":{"line":437,"file":"Utils.ts","path":"src/utils"}}],"meta":{"line":35,"file":"Utils.ts","path":"src/utils"}},{"name":"StreamConnection","construct":{"name":"StreamConnection","description":"<p>StreamConnection constructor</p>","params":[{"name":"connection","type":[[["VoiceConnection"]]]},{"name":"channel","type":[[["VoiceChannel"]],[["StageChannel"]]]}]},"props":[{"name":"player","description":"<p>The AudioPlayer</p>","type":[[["AudioPlayer"]]],"meta":{"line":48,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"channel","description":"<p>The VoiceChannel or StageChannel</p>","type":[[["VoiceChannel"]],[["StageChannel"]]],"meta":{"line":54,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"volume","description":"<p>Gets the current volume</p>","type":[[["number"]]],"meta":{"line":192,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"time","description":"<p>Gets the stream time</p>","type":[[["number"]]],"meta":{"line":202,"file":"StreamConnection.ts","path":"src/voice"}}],"methods":[{"name":"createAudioStream","params":[{"name":"stream","type":[[["Readable"]],[["string"]]]},{"name":"options","type":[[["Object"]]]}],"returns":[[["AudioResource","<"],["Song",">"]]],"meta":{"line":114,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"_enterState","access":"private","async":true,"returns":[[["void"]]],"meta":{"line":130,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"playAudioStream","params":[{"name":"resource","type":[[["AudioResource","<"],["Song",">"]]]}],"async":true,"returns":[[["Promise","<"],["StreamConnection",">"]]],"meta":{"line":138,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"setPauseState","description":"<p>Pauses/Resumes the connection</p>","params":[{"name":"state","type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":157,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"stop","description":"<p>Stops and ends the connection</p>","returns":[[["boolean"]]],"meta":{"line":174,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"leave","description":"<p>Disconnect and leave from the voice channel</p>","returns":[[["void"]]],"meta":{"line":182,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"setVolume","description":"<p>Sets the current volume</p>","params":[{"name":"volume","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":211,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"_invalidVolume","access":"private","params":[{"name":"volume","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":224,"file":"StreamConnection.ts","path":"src/voice"}}],"meta":{"line":34,"file":"StreamConnection.ts","path":"src/voice"}}],"interfaces":[],"typedefs":[{"name":"DMPErrors","description":"<p>The DMPErrors short messages.\nFollowing modes exists:</p>\n<ul>\n<li>Unknown: <code>There was an Unknown Error.</code>,</li>\n<li>QueueDestroyed: <code>The Queue was destroyed.</code>,</li>\n<li>NothingPlaying: <code>There is currently no Song playing in the Voice Channel.</code>,</li>\n<li>UnknownVoice: <code>The provided Member is not in a Voice Channel.</code>,</li>\n<li>ChannelTypeInvalid: <code>The provided Channel is not a Voice Channel.</code>,</li>\n<li>VoiceConnectionError: <code>There was an Error while starting the Voice Stream</code>,</li>\n<li>NoVoiceConnection: <code>There is no Queue#connection [you should use Queue#join()] first.</code>,</li>\n<li>UnknownRepeatMode: <code>The provided RepeatMode was not valid.</code>,</li>\n<li>ResourceNotReady: <code>The AudioResource was not ready.</code>,</li>\n<li>InvalidGuild: <code>The provided Guild was invalid.</code>,</li>\n<li>SearchIsNull: <code>The was no YouTube song found by that query.</code>,</li>\n<li>InvalidSpotify: <code>The was no Spotify song found with that link.</code>,</li>\n<li>InvalidPlaylist: <code>There was no Playlist found with that link.</code></li>\n</ul>","type":[[["DMPErrorMessages"]]],"meta":{"line":83,"file":"DMPError.ts","path":"src/managers"}},{"name":"PlayerOptions","description":"<p>Player options</p>","type":[[["object"]]],"params":[{"name":"leaveOnEnd","description":"<p>If it should leave on end</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"leaveOnStop","description":"<p>If it should leave on stop</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"leaveOnEmpty","description":"<p>If it should leave on empty voice channel</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"deafenOnJoin","description":"<p>If it should deafen on join</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"timeout","description":"<p>Voice channel leave timeout</p>","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"<p>Player volume</p>","optional":true,"default":100,"type":[[["number"]]]},{"name":"quality","description":"<p>Player quality</p>","optional":true,"default":"high","type":[[["string"]]]},{"name":"localAddress","description":"<p>Custom ipv4/ipv6 address</p>","optional":true,"type":[[["string"]]]},{"name":"ytdlRequestOptions","description":"<p>Custom YTDL Request Options object</p>","optional":true,"type":[[["string"]]]}],"meta":{"line":5,"file":"types.ts","path":"src/types"}},{"name":"PlayOptions","description":"<p>Play options</p>","type":[[["object"]]],"params":[{"name":"uploadDate","description":"<p>Search sort by Upload date</p>","optional":true,"type":[[["string"]]]},{"name":"duration","description":"<p>Search sort by Duration</p>","optional":true,"type":[[["string"]]]},{"name":"sortBy","description":"<p>Search sort by Sort by</p>","optional":true,"default":"relevance","type":[[["string"]]]},{"name":"timecode","description":"<p>If url with timecode (?t=) provided, will play from that moment</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"seek","description":"<p>Seek to a specific time</p>","optional":true,"type":[[["number"]]]},{"name":"index","description":"<p>If the index was provided, it will add the song after the provided index in the Queue</p>","optional":true,"type":[[["number"]]]},{"name":"requestedBy","description":"<p>The User who requested the Song</p>","optional":true,"type":[[["User"]]]},{"name":"localAddress","description":"<p>Custom ipv4/ipv6 address</p>","optional":true,"type":[[["string"]]]}],"meta":{"line":30,"file":"types.ts","path":"src/types"}},{"name":"PlaylistOptions","description":"<p>Playlist options</p>","type":[[["object"]]],"params":[{"name":"maxSongs","description":"<p>Max songs</p>","optional":true,"default":-1,"type":[[["number"]]]},{"name":"requestedBy","description":"<p>The User who requested the Song</p>","optional":true,"type":[[["User"]]]},{"name":"shuffle","description":"<p>If it should shuffle the Songs</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"index","description":"<p>If the index was provided, it will add all songs of the playlist after the provided index in the Queue</p>","optional":true,"type":[[["number"]]]},{"name":"localAddress","description":"<p>Custom ipv4/ipv6 address</p>","optional":true,"type":[[["string"]]]}],"meta":{"line":53,"file":"types.ts","path":"src/types"}},{"name":"ProgressBarOptions","type":[[["object"]]],"props":[{"name":"time","description":"<p>If it should add time near the ProgressBar</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"size","description":"<p>Bar size</p>","optional":true,"default":20,"type":[[["number"]]]},{"name":"block","description":"<p>Bar block</p>","optional":true,"default":"=","type":[[["string"]]]},{"name":"arrow","description":"<p>Bar ending</p>","optional":true,"default":">","type":[[["string"]]]}],"meta":{"line":70,"file":"types.ts","path":"src/types"}},{"name":"DefaultPlayerOptions","description":"<p>Default play options object</p>","type":[[["PlayOptions"]]],"params":[{"name":"sortBy","description":"<p>Search sort by Sort by</p>","optional":true,"default":"relevance","type":[[["string"]]]},{"name":"timecode","description":"<p>If url with timecode (?t=) provided, will play from that moment</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":105,"file":"types.ts","path":"src/types"}},{"name":"DefaultPlayOptions","description":"<p>Default playlist options object</p>","type":[[["PlaylistOptions"]]],"params":[{"name":"maxSongs","description":"<p>Max songs</p>","optional":true,"default":-1,"type":[[["number"]]]},{"name":"shuffle","description":"<p>If it should shuffle the Songs</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":116,"file":"types.ts","path":"src/types"}},{"name":"DefaultPlaylistOptions","description":"<p>Default progress bar options object</p>","type":[[["ProgressBarOptions"]]],"params":[{"name":"time","description":"<p>If it should add time near the ProgressBar</p>","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"size","description":"<p>Bar size</p>","optional":true,"default":20,"type":[[["number"]]]},{"name":"block","description":"<p>Bar block</p>","optional":true,"default":"=","type":[[["string"]]]},{"name":"arrow","description":"<p>Bar ending</p>","optional":true,"default":">","type":[[["string"]]]}],"meta":{"line":127,"file":"types.ts","path":"src/types"}},{"name":"RawSong","description":"<p>Raw Song object</p>","type":[[["object"]]],"props":[{"name":"name","type":[[["string"]]]},{"name":"author","type":[[["string"]]]},{"name":"url","type":[[["string"]]]},{"name":"thumbnail","type":[[["string"]]]},{"name":"duration","type":[[["string"]]]},{"name":"isLive","type":[[["boolean"]]]}],"meta":{"line":142,"file":"types.ts","path":"src/types"}},{"name":"RepeatMode","description":"<p>The queue repeat mode.\nFollowing modes exists:</p>\n<ul>\n<li><code>OFF</code> = 0</li>\n<li><code>SONG</code>  = 1</li>\n<li><code>QUEUE</code> = 2</li>\n</ul>","type":[[["number"]]],"meta":{"line":179,"file":"types.ts","path":"src/types"}}],"externals":[]}