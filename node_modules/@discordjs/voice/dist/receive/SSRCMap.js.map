{"version":3,"file":"SSRCMap.js","sourceRoot":"","sources":["../../src/receive/SSRCMap.ts"],"names":[],"mappings":";;;AAAA,2DAAkD;AA+BlD;;GAEG;AACH,MAAa,OAAQ,SAAQ,iCAA2B;IAMvD;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,IAAmB;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE9C,MAAM,QAAQ,GAAG;YAChB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;YAC/B,GAAG,IAAI;SACP,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ;YAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACI,GAAG,CAAC,MAAuB;QACjC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC/B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAC5B;QACD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE;YACrC,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;gBAC3B,OAAO,IAAI,CAAC;aACZ;SACD;IACF,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,MAAuB;QACpC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACtC,IAAI,QAAQ,EAAE;gBACb,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aAC9B;YACD,OAAO,QAAQ,CAAC;SAChB;QACD,KAAK,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE;YACnD,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;gBAC3B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAC1B,OAAO,IAAI,CAAC;aACZ;SACD;IACF,CAAC;CACD;AApED,0BAoEC","sourcesContent":["import { TypedEmitter } from 'tiny-typed-emitter';\nimport { Awaited } from '../util/util';\n\n/**\n * The known data for a user in a Discord voice connection\n */\nexport interface VoiceUserData {\n\t/**\n\t * The SSRC of the user's audio stream\n\t */\n\taudioSSRC: number;\n\t/**\n\t * The SSRC of the user's video stream (if one exists).\n\t * Cannot be 0. If undefined, the user has no video stream.\n\t */\n\tvideoSSRC?: number;\n\t/**\n\t * The Discord user ID of the user\n\t */\n\tuserId: string;\n}\n\n/**\n * The events that an SSRCMap may emit.\n */\nexport interface SSRCMapEvents {\n\tcreate: (newData: VoiceUserData) => Awaited<void>;\n\tupdate: (oldData: VoiceUserData | undefined, newData: VoiceUserData) => Awaited<void>;\n\tdelete: (deletedData: VoiceUserData) => Awaited<void>;\n}\n\n/**\n * Maps audio SSRCs to data of users in voice connections.\n */\nexport class SSRCMap extends TypedEmitter<SSRCMapEvents> {\n\t/**\n\t * The underlying map\n\t */\n\tprivate readonly map: Map<number, VoiceUserData>;\n\n\tpublic constructor() {\n\t\tsuper();\n\t\tthis.map = new Map();\n\t}\n\n\t/**\n\t * Updates the map with new user data\n\t *\n\t * @param data The data to update with\n\t */\n\tpublic update(data: VoiceUserData) {\n\t\tconst existing = this.map.get(data.audioSSRC);\n\n\t\tconst newValue = {\n\t\t\t...this.map.get(data.audioSSRC),\n\t\t\t...data,\n\t\t};\n\n\t\tthis.map.set(data.audioSSRC, newValue);\n\t\tif (!existing) this.emit('create', newValue);\n\t\tthis.emit('update', existing, newValue);\n\t}\n\n\t/**\n\t * Gets the stored voice data of a user.\n\t *\n\t * @param target The target, either their user ID or audio SSRC\n\t */\n\tpublic get(target: number | string) {\n\t\tif (typeof target === 'number') {\n\t\t\treturn this.map.get(target);\n\t\t}\n\t\tfor (const data of this.map.values()) {\n\t\t\tif (data.userId === target) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes the stored voice data about a user.\n\t *\n\t * @param target The target of the delete operation, either their audio SSRC or user ID\n\t * @returns The data that was deleted, if any\n\t */\n\tpublic delete(target: number | string) {\n\t\tif (typeof target === 'number') {\n\t\t\tconst existing = this.map.get(target);\n\t\t\tif (existing) {\n\t\t\t\tthis.map.delete(target);\n\t\t\t\tthis.emit('delete', existing);\n\t\t\t}\n\t\t\treturn existing;\n\t\t}\n\t\tfor (const [audioSSRC, data] of this.map.entries()) {\n\t\t\tif (data.userId === target) {\n\t\t\t\tthis.map.delete(audioSSRC);\n\t\t\t\tthis.emit('delete', data);\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}