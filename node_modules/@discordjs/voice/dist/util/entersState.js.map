{"version":3,"file":"entersState.js","sourceRoot":"","sources":["../../src/util/entersState.ts"],"names":[],"mappings":";;;AAEA,6CAA0C;AAC1C,mCAA4C;AA4B5C;;;;;;GAMG;AACI,KAAK,UAAU,WAAW,CAChC,MAAS,EACT,MAAiD,EACjD,eAAqC;IAErC,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;QACnC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,GACjB,OAAO,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,uBAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QAClG,IAAI;YACH,MAAM,aAAI,CAAC,MAAsB,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;SACvD;gBAAS;YACT,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,KAAK,EAAE,CAAC;SACZ;KACD;IACD,OAAO,MAAM,CAAC;AACf,CAAC;AAfD,kCAeC","sourcesContent":["import { VoiceConnection, VoiceConnectionStatus } from '../VoiceConnection';\nimport { AudioPlayer, AudioPlayerStatus } from '../audio/AudioPlayer';\nimport { abortAfter } from './abortAfter';\nimport EventEmitter, { once } from 'events';\n\n/**\n * Allows a voice connection a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The voice connection that we want to observe the state change for\n * @param status - The status that the voice connection should be in\n * @param timeoutOrSignal - The maximum time we are allowing for this to occur, or a signal that will abort the operation\n */\nexport function entersState(\n\ttarget: VoiceConnection,\n\tstatus: VoiceConnectionStatus,\n\ttimeoutOrSignal: number | AbortSignal,\n): Promise<VoiceConnection>;\n\n/**\n * Allows an audio player a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The audio player that we want to observe the state change for\n * @param status - The status that the audio player should be in\n * @param timeoutOrSignal - The maximum time we are allowing for this to occur, or a signal that will abort the operation\n */\nexport function entersState(\n\ttarget: AudioPlayer,\n\tstatus: AudioPlayerStatus,\n\ttimeoutOrSignal: number | AbortSignal,\n): Promise<AudioPlayer>;\n\n/**\n * Allows a target a specified amount of time to enter a given state, otherwise rejects with an error.\n *\n * @param target - The object that we want to observe the state change for\n * @param status - The status that the target should be in\n * @param timeoutOrSignal - The maximum time we are allowing for this to occur, or a signal that will abort the operation\n */\nexport async function entersState<T extends VoiceConnection | AudioPlayer>(\n\ttarget: T,\n\tstatus: VoiceConnectionStatus | AudioPlayerStatus,\n\ttimeoutOrSignal: number | AbortSignal,\n) {\n\tif (target.state.status !== status) {\n\t\tconst [ac, signal] =\n\t\t\ttypeof timeoutOrSignal === 'number' ? abortAfter(timeoutOrSignal) : [undefined, timeoutOrSignal];\n\t\ttry {\n\t\t\tawait once(target as EventEmitter, status, { signal });\n\t\t} finally {\n\t\t\tac?.abort();\n\t\t}\n\t}\n\treturn target;\n}\n"]}