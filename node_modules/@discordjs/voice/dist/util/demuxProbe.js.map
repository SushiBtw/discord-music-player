{"version":3,"file":"demuxProbe.js","sourceRoot":"","sources":["../../src/util/demuxProbe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\nimport { opus } from 'prism-media';\nimport { noop } from './util';\nimport { StreamType } from '..';\n\n/**\n * Takes an Opus Head, and verifies whether the associated Opus audio is suitable to play in a Discord voice channel.\n * @param opusHead The Opus Head to validate\n * @returns true if suitable to play in a Discord voice channel, false otherwise\n */\nexport function validateDiscordOpusHead(opusHead: Buffer): boolean {\n\tconst channels = opusHead.readUInt8(9);\n\tconst sampleRate = opusHead.readUInt32LE(12);\n\treturn channels === 2 && sampleRate === 48000;\n}\n\n/**\n * The resulting information after probing an audio stream\n */\nexport interface ProbeInfo {\n\t/**\n\t * The readable audio stream to use. You should use this rather than the input stream, as the probing\n\t * function can sometimes read the input stream to its end and cause the stream to close.\n\t */\n\tstream: Readable;\n\t/**\n\t * The recommended stream type for this audio stream\n\t */\n\ttype: StreamType;\n}\n\n/**\n * Attempt to probe a readable stream to figure out whether it can be demuxed using an Ogg or WebM Opus demuxer.\n * @param stream The readable stream to probe\n * @param probeSize The number of bytes to attempt to read before giving up on the probe\n * @param validator The Opus Head validator function\n * @experimental\n */\nexport function demuxProbe(\n\tstream: Readable,\n\tprobeSize = 1024,\n\tvalidator = validateDiscordOpusHead,\n): Promise<ProbeInfo> {\n\treturn new Promise((resolve, reject) => {\n\t\t// Preconditions\n\t\tif (stream.readableObjectMode) reject(new Error('Cannot probe a readable stream in object mode'));\n\t\tif (stream.readableEnded) reject(new Error('Cannot probe a stream that has ended'));\n\n\t\tlet readBuffer = Buffer.alloc(0);\n\n\t\tlet resolved: StreamType | undefined = undefined;\n\n\t\tconst finish = (type: StreamType) => {\n\t\t\tstream.off('data', onData);\n\t\t\tstream.off('close', onClose);\n\t\t\tstream.off('end', onClose);\n\t\t\tstream.pause();\n\t\t\tresolved = type;\n\t\t\tif (stream.readableEnded) {\n\t\t\t\tresolve({\n\t\t\t\t\tstream: Readable.from(readBuffer),\n\t\t\t\t\ttype,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (readBuffer.length > 0) {\n\t\t\t\t\tstream.push(readBuffer);\n\t\t\t\t}\n\t\t\t\tresolve({\n\t\t\t\t\tstream,\n\t\t\t\t\ttype,\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst foundHead = (type: StreamType) => (head: Buffer) => {\n\t\t\tif (validator(head)) {\n\t\t\t\tfinish(type);\n\t\t\t}\n\t\t};\n\n\t\tconst webm = new opus.WebmDemuxer();\n\t\twebm.once('error', noop);\n\t\twebm.on('head', foundHead(StreamType.WebmOpus));\n\n\t\tconst ogg = new opus.OggDemuxer();\n\t\togg.once('error', noop);\n\t\togg.on('head', foundHead(StreamType.OggOpus));\n\n\t\tconst onClose = () => {\n\t\t\tif (!resolved) {\n\t\t\t\tfinish(StreamType.Arbitrary);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = (buffer: Buffer) => {\n\t\t\treadBuffer = Buffer.concat([readBuffer, buffer]);\n\n\t\t\twebm.write(buffer);\n\t\t\togg.write(buffer);\n\n\t\t\tif (readBuffer.length >= probeSize) {\n\t\t\t\tstream.off('data', onData);\n\t\t\t\tstream.pause();\n\t\t\t\tprocess.nextTick(onClose);\n\t\t\t}\n\t\t};\n\n\t\tstream.once('error', reject);\n\t\tstream.on('data', onData);\n\t\tstream.once('close', onClose);\n\t\tstream.once('end', onClose);\n\t});\n}\n"]}