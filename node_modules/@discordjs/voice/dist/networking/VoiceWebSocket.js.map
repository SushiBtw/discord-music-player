{"version":3,"file":"VoiceWebSocket.js","sourceRoot":"","sources":["../../src/networking/VoiceWebSocket.ts"],"names":[],"mappings":"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","sourcesContent":["import { VoiceOpcodes } from 'discord-api-types/voice/v4';\nimport WebSocket, { MessageEvent } from 'ws';\nimport { TypedEmitter } from 'tiny-typed-emitter';\nimport { Awaited } from '../util/util';\n\n/**\n * Debug event for VoiceWebSocket.\n *\n * @event VoiceWebSocket#debug\n * @type {string}\n */\n\nexport interface VoiceWebSocketEvents {\n\terror: (error: Error) => Awaited<void>;\n\topen: (event: WebSocket.OpenEvent) => Awaited<void>;\n\tclose: (event: WebSocket.CloseEvent) => Awaited<void>;\n\tdebug: (message: string) => Awaited<void>;\n\tpacket: (packet: any) => Awaited<void>;\n}\n\n/**\n * An extension of the WebSocket class to provide helper functionality when interacting\n * with the Discord Voice gateway.\n */\nexport class VoiceWebSocket extends TypedEmitter<VoiceWebSocketEvents> {\n\t/**\n\t * The current heartbeat interval, if any\n\t */\n\tprivate heartbeatInterval?: NodeJS.Timeout;\n\n\t/**\n\t * The time (milliseconds since UNIX epoch) that the last heartbeat acknowledgement packet was received.\n\t * This is set to 0 if an acknowledgement packet hasn't been received yet.\n\t */\n\tprivate lastHeartbeatAck: number;\n\n\t/**\n\t * The time (milliseconds since UNIX epoch) that the last heartbeat was sent. This is set to 0 if a heartbeat\n\t * hasn't been sent yet.\n\t */\n\tprivate lastHeatbeatSend: number;\n\n\t/**\n\t * The number of consecutively missed heartbeats.\n\t */\n\tprivate missedHeartbeats = 0;\n\n\t/**\n\t * The last recorded ping.\n\t */\n\tpublic ping?: number;\n\n\t/**\n\t * The debug logger function, if debugging is enabled.\n\t */\n\tprivate readonly debug: null | ((message: string) => void);\n\n\t/**\n\t * The underlying WebSocket of this wrapper\n\t */\n\tprivate readonly ws: WebSocket;\n\n\t/**\n\t * Creates a new VoiceWebSocket\n\t *\n\t * @param address - The address to connect to\n\t */\n\tpublic constructor(address: string, debug: boolean) {\n\t\tsuper();\n\t\tthis.ws = new WebSocket(address);\n\t\tthis.ws.onmessage = (e) => this.onMessage(e);\n\t\tthis.ws.onopen = (e) => this.emit('open', e);\n\t\tthis.ws.onerror = (e: Error | WebSocket.ErrorEvent) => this.emit('error', e instanceof Error ? e : e.error);\n\t\tthis.ws.onclose = (e) => this.emit('close', e);\n\n\t\tthis.lastHeartbeatAck = 0;\n\t\tthis.lastHeatbeatSend = 0;\n\n\t\tthis.debug = debug ? (message: string) => this.emit('debug', message) : null;\n\t}\n\n\t/**\n\t * Destroys the VoiceWebSocket. The heartbeat interval is cleared, and the connection is closed.\n\t */\n\tpublic destroy() {\n\t\ttry {\n\t\t\tthis.debug?.('destroyed');\n\t\t\tthis.setHeartbeatInterval(-1);\n\t\t\tthis.ws.close(1000);\n\t\t} catch (error) {\n\t\t\tthis.emit('error', error);\n\t\t}\n\t}\n\n\t/**\n\t * Handles message events on the WebSocket. Attempts to JSON parse the messages and emit them\n\t * as packets.\n\t *\n\t * @param event - The message event\n\t */\n\tpublic onMessage(event: MessageEvent) {\n\t\tif (typeof event.data !== 'string') return;\n\n\t\tthis.debug?.(`<< ${event.data}`);\n\n\t\tlet packet: any;\n\t\ttry {\n\t\t\tpacket = JSON.parse(event.data);\n\t\t} catch (error) {\n\t\t\tthis.emit('error', error);\n\t\t\treturn;\n\t\t}\n\n\t\tif (packet.op === VoiceOpcodes.HeartbeatAck) {\n\t\t\tthis.lastHeartbeatAck = Date.now();\n\t\t\tthis.missedHeartbeats = 0;\n\t\t\tthis.ping = this.lastHeartbeatAck - this.lastHeatbeatSend;\n\t\t}\n\n\t\t/**\n\t\t * Packet event.\n\t\t *\n\t\t * @event VoiceWebSocket#packet\n\t\t * @type {any}\n\t\t */\n\t\tthis.emit('packet', packet);\n\t}\n\n\t/**\n\t * Sends a JSON-stringifiable packet over the WebSocket\n\t *\n\t * @param packet - The packet to send\n\t */\n\tpublic sendPacket(packet: any) {\n\t\ttry {\n\t\t\tconst stringified = JSON.stringify(packet);\n\t\t\tthis.debug?.(`>> ${stringified}`);\n\t\t\treturn this.ws.send(stringified);\n\t\t} catch (error) {\n\t\t\tthis.emit('error', error);\n\t\t}\n\t}\n\n\t/**\n\t * Sends a heartbeat over the WebSocket\n\t */\n\tprivate sendHeartbeat() {\n\t\tthis.lastHeatbeatSend = Date.now();\n\t\tthis.missedHeartbeats++;\n\t\tconst nonce = this.lastHeatbeatSend;\n\t\treturn this.sendPacket({\n\t\t\top: VoiceOpcodes.Heartbeat,\n\t\t\td: nonce,\n\t\t});\n\t}\n\n\t/**\n\t * Sets/clears an interval to send heartbeats over the WebSocket\n\t *\n\t * @param ms - The interval in milliseconds. If negative, the interval will be unset.\n\t */\n\tpublic setHeartbeatInterval(ms: number) {\n\t\tif (typeof this.heartbeatInterval !== 'undefined') clearInterval(this.heartbeatInterval);\n\t\tif (ms > 0) {\n\t\t\tthis.heartbeatInterval = setInterval(() => {\n\t\t\t\tif (this.lastHeatbeatSend !== 0 && this.missedHeartbeats >= 3) {\n\t\t\t\t\t// Missed too many heartbeats - disconnect\n\t\t\t\t\tthis.ws.close();\n\t\t\t\t\tthis.setHeartbeatInterval(-1);\n\t\t\t\t}\n\t\t\t\tthis.sendHeartbeat();\n\t\t\t}, ms);\n\t\t}\n\t}\n}\n"]}